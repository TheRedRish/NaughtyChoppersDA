@page "/create-profile"
@using NaughtyChoppersDA.Globals.Utils;
@using NaughtyChoppersDA.Services;
@using NaughtyChoppersDA.Entities;
@using MudBlazor;
@inject IProfileService ProfileService
@inject IUserService UserService

@if (UserService.User != null)
{
    <MudContainer MaxWidth="MaxWidth.Small">
        <MudForm @ref="form" @bind-IsValid="@success">
            <MudCard>
                <MudCardContent>
                    <MudContainer Class="text-center">
                        <MudText Typo="Typo.h4" Class="mb-2">
                            Create Profile
                        </MudText>
                    </MudContainer>

                    <MudTextField Label="Name"
                                  Variant="Variant.Outlined"
                                  Required="true"
                                  RequiredError="The Name field is required"
                    @bind-Value="profile.Name" />

                    <MudDatePicker Label="Date of Birth"
                                   Variant="Variant.Outlined"
                                   IsDateDisabledFunc="@((DateTime dt)=>(dt > DateTime.Now))"
                                   DisableToolbar="true"
                                   OpenTo="OpenTo.Year"
                                   Required="true"
                                   RequiredError="Date of Birth is required"
                    @bind-Date="profile.DateOfBirth" />

                    <MudSelect Label="Helicopter Model"
                               Variant="Variant.Outlined"
                               Required="true"
                               RequiredError="Helicopter Model is required"
                    @bind-Value="profile.Model!.Id">
                        @foreach (var model in helicopterModels)
                        {
                            <MudSelectItem Value="@model.Id">@model.Name</MudSelectItem>
                        }
                    </MudSelect>

                    <MudFileUpload T="IBrowserFile" Context="selectedFile"
                                   Required="true"
                                   RequiredError="Profile image is required"
                                   Accept=".jpg,.jpeg,.png,.gif"
                    @bind-Files="selectedFile">
                        <ButtonTemplate>
                            <MudButton HtmlTag="label"
                                       Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       for="@selectedFile">
                                Upload File
                            </MudButton>
                        </ButtonTemplate>
                        <SelectedTemplate>
                            @if (selectedFile != null)
                            {
                                <MudText>@selectedFile.Name</MudText>
                            }
                            else
                            {
                                <MudText>No File Selected</MudText>
                            }
                        </SelectedTemplate>
                    </MudFileUpload>

                    <MudTextField Label="Postal Code"
                                  Variant="Variant.Outlined" @bind-Value="profile.PostalCode"
                                  Required="true"
                                  RequiredError="The PostalCode field is required" @onblur="FetchCity" />

                    <MudTextField Label="City"
                                  Variant="Variant.Outlined" @bind-Value="profile.City"
                                  Required="true"
                                  RequiredError="City is required" />

                    <MudSelect T="string" Label="Select Hobby Interests"
                               HelperText="What do you like to do in your spare time?"
                               Variant="Variant.Outlined"
                               MultiSelection="true" @bind-Value="displayedHobbyInterests"
                               Required="true"
                               RequiredError="The Hobby Interest field is required"
                    @bind-SelectedValues="selectedHobbyInterests">
                        @foreach (HobbyInterest hobbyInterest in hobbyInterests)
                        {
                            <MudSelectItem T="string" Value="@hobbyInterest.Name">@hobbyInterest.Name</MudSelectItem>
                        }
                    </MudSelect>

                    <MudSelect T="string" Label="Select Model Interests"
                               HelperText="Who are in interested in?"
                               Variant="Variant.Outlined"
                               MultiSelection="true" @bind-Value="displayedModelInterests"
                               Required="true"
                               RequiredError="The Model Interest field is required"
                    @bind-SelectedValues="selectedModelInterests">
                        @foreach (HelicopterModel helicopterModel in helicopterModels)
                        {
                            <MudSelectItem T="string" Value="@helicopterModel.Name">@helicopterModel.Name</MudSelectItem>
                        }
                    </MudSelect>

                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" OnClick="@(()=>HandleSubmit())">
                        Create Profile
                    </MudButton>
                </MudCardContent>
            </MudCard>
        </MudForm>
    </MudContainer>

    <button type="button" @onclick="GetProfile">Get profile with userId</button>
    <button type="button" @onclick="DeleteProfile">Delete Profile</button>
}
@code {
    public Profile profile = new();
    public List<HelicopterModel> helicopterModels = new List<HelicopterModel>();
    public List<HobbyInterest> hobbyInterests = new List<HobbyInterest>();
    private IBrowserFile selectedFile;
    private string displayedHobbyInterests { get; set; }
    private string displayedModelInterests { get; set; }
    private IEnumerable<string> selectedHobbyInterests { get; set; } = new HashSet<string>();
    private IEnumerable<string> selectedModelInterests { get; set; } = new HashSet<string>();
    private EditContext editContext;
    private ValidationMessageStore validationMessageStore;
    MudForm form;
    bool success;

    protected override void OnInitialized()
    {
        if (UserService.User == null)
        {
            NavigationManager.NavigateTo("/user-login");
        }

        // Setting default model
        profile.Model = new() { Id = 1, Name = "" };

        editContext = new EditContext(profile);
        validationMessageStore = new ValidationMessageStore(editContext);

        hobbyInterests = ProfileService.GetAllHobbyInterests();
        helicopterModels = ProfileService.GetAllHelicopterModels();
    }

    private void FetchCity()
    {
        if (!string.IsNullOrEmpty(profile.PostalCode))
        {
            profile.City = ProfileService.GetCityByPostalCode(profile.PostalCode);
        }
    }

    private async Task HandleFileSelection()
    {
        // Check if a file was selected
        if (selectedFile != null)
        {
            // Convert the selected file to a byte array
            using (var memoryStream = new MemoryStream())
            {
                await selectedFile.OpenReadStream().CopyToAsync(memoryStream);
                var imageDataBytes = memoryStream.ToArray();

                // Now you have the image data as a byte array (imageDataBytes)

                // You can set the byte array to the profile's image property
                profile.ProfileImage = imageDataBytes;

                // You can also handle storing the byte array in your database
            }
        }
    }
    private void AddHobbyInterrestsToProfile()
    {
        List<HobbyInterest> filteredHobbyInterests = hobbyInterests.Where(hobbyInterest => selectedHobbyInterests.Contains(hobbyInterest.Name)).ToList();
        profile.HobbyInterests = filteredHobbyInterests;
    }
    private void AddHelicopterModelInterrestsToProfile()
    {
        List<HelicopterModel> filteredHelicopterModelInterests = helicopterModels.Where(helicopterModel => selectedModelInterests.Contains(helicopterModel.Name)).ToList();
        profile.HelicopterModelInterests = filteredHelicopterModelInterests;
    }

    private void GetProfile()
    {
        ProfileService.Profile = ProfileService.GetProfile(UserService.User.UserId);
    }

    private void DeleteProfile()
    {
        if (ProfileService.Profile?.ProfileId != null)
        {
            ProfileService.DeleteProfile((Guid)ProfileService.Profile.ProfileId);
        }
    }

    private async void HandleSubmit()
    {
        await form.Validate();
        if (!success)
        {
            return;
        }

        await HandleFileSelection();
        AddHobbyInterrestsToProfile();
        AddHelicopterModelInterrestsToProfile();

        if (UserService.User != null)
        {
            ProfileService.CreateProfile(profile, UserService.User);
        }
        NavigationManager.NavigateTo("/");
    }
}
