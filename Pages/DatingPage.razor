@page "/DatingPage"
@using System.IO
@using NaughtyChoppersDA.Entities
@using NaughtyChoppersDA.Repositories
@using NaughtyChoppersDA.Services
@using System.Linq
@inject IProfileService profileService


<h3>Singles</h3>

@if (currentProfile != null)
{
    <section class="section about-section" id="about">
        <div class="container">
            <div class="row align-items-center justify-content-around flex-row">
                <div class="col-lg-5 text-center">
                    <div class="about-img">
                        <MudImage ObjectFit="ObjectFit.Cover" Height="400" Width="400" Src="@imageDataUrl" Alt="Profile Image" />
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="about-text">
                        <h3 class="dark-color">@currentProfile.Name</h3>
                        <h4 class="theme-color">@currentProfile.Model.Name</h4>
                        <p>@currentProfile.PostalCode, @currentProfile.City</p>
                        <p>Age: @currentProfile.Age</p>
                        <p></p> @* Space for description *@
                        <p>
                            @for (int i = 0; i < currentProfile.HobbyInterests.Count; i++)
                            {
                                HobbyInterest currentHobbyInterest = currentProfile.HobbyInterests[i];

                                switch (i)
                                {
                                    case 0:
                                        <MudChip Class="ms-0" Variant="Variant.Outlined" Color="Color.Primary">@currentHobbyInterest.Name</MudChip>
                                        break;
                                    case 1:
                                        <MudChip Variant="Variant.Outlined" Color="Color.Secondary">@currentHobbyInterest.Name</MudChip>
                                        break;
                                    case 2:
                                        <MudChip Variant="Variant.Outlined" Color="Color.Info">@currentHobbyInterest.Name</MudChip>
                                        break;
                                    default:
                                        break;
                                }
                            }
                        </p>
                        <MudContainer Class="d-flex justify-content-around">
                            <MudTooltip Text="Dislike">
                                <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Close" @onclick="DislikeProfile" DisableElevation>Dislike</MudFab>
                            </MudTooltip>
                            <MudTooltip Text="Like">
                                <MudFab Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.Favorite" @onclick="LikeProfile" DisableElevation>Like</MudFab>
                            </MudTooltip>
                        </MudContainer>
                    </div>
                </div>
            </div>
        </div>
    </section>
}
else
{
    <p>No profiles to display.</p>
}

<style>
    .mud-layout {
        height: 100%;
    }
</style>

@code {
    IMatchingRepository matchingRepository = new MatchingRepository();

    private List<Profile> profiles = new();


    protected async override Task OnInitializedAsync()
    {
        var profileId = profileService.Profile!.ProfileId;
        profiles = matchingRepository.GetFilteredListOfProfiles((Guid)profileService.Profile!.ProfileId!); // Initialize with your list of profiles
    }

    int currentIndex = 0;
    Profile? currentProfile => profiles.Count() == 0 ? null : profiles.First() ;
    private byte[]? imageData => currentProfile == null ? null : currentProfile.ProfileImage;
    private string imageDataUrl => imageData != null ? $"data:image/*;base64,{Convert.ToBase64String(imageData)}" : "";

    async void LikeProfile()
    {
        matchingRepository.LikeProfileAsync((Guid)profileService.Profile!.ProfileId!, (Guid)currentProfile.ProfileId!, true);
        profiles.RemoveAt(currentIndex);
    }

    async void DislikeProfile()
    {
        matchingRepository.LikeProfileAsync((Guid)profileService.Profile!.ProfileId!, (Guid)currentProfile.ProfileId!, false);
        profiles.RemoveAt(currentIndex);
    }

}
